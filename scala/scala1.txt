# 0: Prednaska
```scala
class Person(val name:String, val age:Int)
val people: Array[Person]
val (minors,adults) = people     partition (_.age < 18 )
val (minors,adults) = people.par partition (_.age < 18 )  //parallell

actor {
    receive {
        case people: Set[Person] => val (minors,adults) = people     partition (_.age < 18 )
        facebook !  minors
        linkedin !  adults
    }
}

for ( i <- 1 to 8) {}
```

# I Substitution model

CBV vyhodnoti parametry fce hned
CBN vyhodnoti parametr funkce teprve jestli je uvnitr fce potrebuje a klidne vickrat to same

cbv terminates=>cbn terminates: naopak to neplati

parametry fce
> CBV scala default
> => CBN
```scala
def constOne(x: Int, y: => Int) = 1
constOne(1+2, loop)
constOne(loop, 1+2)

def CBN //eval at each use
val CBV //eval at definition

def sqrtIter(guess: Double, x: Double): Double =
    if (isGoodEnough(guess, x)) guess
    else sqrtIter(improve(guess, x), x)

def sqrt(x: Double) = {
    def sqrtIter(guess: Double): Double = if (isGoodEnough(guess)) guess else sqrtIter(improve(guess))
    def improve(guess: Double)          = (guess + x / guess) / 2
    def isGoodEnough(guess: Double)     = abs(square(guess) - x) < 0.001
    sqrtIter(1.0)
}
@tailrec
def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
```

II higher order functions

